name: Unit tests
on:
  workflow_call:
    inputs:
      collection_pre_install:
        default: ""
        required: false
        type: string
      matrix_exclude:
        default: "[]"
        required: false
        type: string
      
jobs:
  unit:
    env:
      PY_COLORS: "1"
      source_directory: "./source"
      dependency_directory: "./dependency"
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        exclude: ${{ fromJSON(inputs.matrix_exclude) }}
        include:
          - ansible-version: stable-2.9
            python-version: "3.6"
          - ansible-version: stable-2.9
            python-version: "3.7"
          - ansible-version: stable-2.9
            python-version: "3.8"
          
          - ansible-version: stable-2.10
            python-version: "3.6"
          - ansible-version: stable-2.10
            python-version: "3.7"
          - ansible-version: stable-2.10
            python-version: "3.8"
          - ansible-version: stable-2.10
            python-version: "3.9"

          - ansible-version: stable-2.11
            python-version: "3.6"
          - ansible-version: stable-2.11
            python-version: "3.7"
          - ansible-version: stable-2.11
            python-version: "3.8"
          - ansible-version: stable-2.11
            python-version: "3.9"

          - ansible-version: stable-2.12
            python-version: "3.8"
          - ansible-version: stable-2.12
            python-version: "3.9"
          - ansible-version: stable-2.12
            python-version: "3.10"

          - ansible-version: stable-2.13
            python-version: "3.8"
          - ansible-version: stable-2.13
            python-version: "3.9"
          - ansible-version: stable-2.13
            python-version: "3.10"

          - ansible-version: milestone
            python-version: "3.9"
          - ansible-version: milestone
            python-version: "3.10"

          - ansible-version: devel
            python-version: "3.9"
          - ansible-version: devel
            python-version: "3.10"

    name: "py${{ matrix.python-version }} / ${{ matrix.ansible-version }} / ${{ matrix.dependency-source }}"
    steps:
      - name: Checkout the collection repository
        uses: actions/checkout@v3
        with:
          path: ${{ env.source_directory }}
          fetch-depth: "0"

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install ansible-core (${{ matrix.ansible-version }})
        run: python3 -m pip install https://github.com/ansible/ansible/archive/${{ matrix.ansible-version }}.tar.gz --disable-pip-version-check

      - name: Read collection metadata from galaxy.yml
        id: identify
        uses: ansible-network/github_actions/.github/actions/identify_collection@main
        with:
          source_path: ${{ env.source_directory }}

      - name: Pre install collections dependencies first so the collection install does not
        run: ansible-galaxy collection install ${{ inputs.collection_pre_install }} -p /home/runner/collections
        if: inputs.collection_pre_install != ''

      - name: Build and install the collection
        uses: ansible-network/github_actions/.github/actions/build_install_collection@main
        with:
          install_python_dependencies: true
          source_path: ${{ env.source_directory }}
          collection_path: ${{ steps.identify.outputs.collection_path }}
          tar_file: ${{ steps.identify.outputs.tar_file }}
      
      - name: Print the ansible version
        run: ansible --version

      - name: Print the python dependencies
        run: python3 -m pip list

      - name: Run unit tests
        run: python -m pytest tests/unit --showlocals
        working-directory: ${{ steps.identify.outputs.collection_path }}
