name: Unit tests, dependencies from source
on:
  workflow_call:
    inputs:
      collection_pre_install:
        required: true
        type: string
      matrix_exclude:
        default: >-
          [
            {
              "_note": "cryptography issues",
              "ansible-version": "stable-2.10",
              "python-version": "3.6"
            },
            {
              "_note": "ansible-base 2.10 does not support python 3.10",
              "ansible-version": "stable-2.10",
              "python-version": "3.10"
            },
            {
              "_note": "cryptography issues",
              "ansible-version": "stable-2.11",
              "python-version": "3.6"
            },
            {
              "_note": "ansible-core 2.11 does not support python 3.10",
              "ansible-version": "stable-2.11",
              "python-version": "3.10"
            },
            {
              "_note": "ansible-core 2.12 does not support python 3.6",
              "ansible-version": "stable-2.12",
              "python-version": "3.6"
            },
            {
              "_note": "ansible-core 2.12 does not support python 3.7",
              "ansible-version": "stable-2.12",
              "python-version": "3.7"
            },
            {
              "_note": "ansible-core 2.13 does not support python 3.6",
              "ansible-version": "stable-2.13",
              "python-version": "3.6"
            },
            {
              "_note": "ansible-core 2.13 does not support python 3.7",
              "ansible-version": "stable-2.13",
              "python-version": "3.7"
            },
            {
              "_note": "ansible-core 2.14 does not support python 3.6",
              "ansible-version": "milestone",
              "python-version": "3.6"
            },
            {
              "_note": "ansible-core 2.14 does not support python 3.7",
              "ansible-version": "milestone",
              "python-version": "3.7"
            },
            {
              "_note": "ansible-core 2.14 does not support python 3.8",
              "ansible-version": "milestone",
              "python-version": "3.8"
            },
            {
              "_note": "ansible-core 2.14 does not support python 3.6",
              "ansible-version": "devel",
              "python-version": "3.6"
            },
            {
              "_note": "ansible-core 2.14 does not support python 3.7",
              "ansible-version": "devel",
              "python-version": "3.7"
            },
            {
              "_note": "ansible-core 2.14 does not support python 3.8",
              "ansible-version": "devel",
              "python-version": "3.8"
            }
          ]
        required: false
        type: string
      
jobs:
  unit_source:
    env:
      PY_COLORS: "1"
      source_directory: "./source"
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        ansible-version:
          # ansible 2.9 does install from git
          - stable-2.10
          - stable-2.11
          - stable-2.12
          - stable-2.13
          - milestone
          - devel
        python-version:
          - "3.6"
          - "3.7"
          - "3.8"
          - "3.9"
          - "3.10"
        exclude: ${{ fromJSON(inputs.matrix_exclude) }}

    name: "py${{ matrix.python-version }} / ${{ matrix.ansible-version }}"
    steps:
      - name: Checkout the collection repository
        uses: actions/checkout@v3
        with:
          path: ${{ env.source_directory }}
          fetch-depth: "0"

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install ansible-core (${{ matrix.ansible-version }})
        run: python3 -m pip install https://github.com/ansible/ansible/archive/${{ matrix.ansible-version }}.tar.gz --disable-pip-version-check

      - name: Read collection metadata from galaxy.yml
        id: identify
        uses: ansible-network/github_actions/.github/actions/identify_collection@main
        with:
          source_path: ${{ env.source_directory }}

      - name: Pre install collections dependencies first so the collection install does not
        run: ansible-galaxy collection install ${{ inputs.collection_pre_install }} -p /home/runner/collections
        if: inputs.collection_pre_install != ''

      - name: Build and install the collection
        uses: ansible-network/github_actions/.github/actions/build_install_collection@main
        with:
          install_python_dependencies: true
          source_path: ${{ env.source_directory }}
          collection_path: ${{ steps.identify.outputs.collection_path }}
          tar_file: ${{ steps.identify.outputs.tar_file }}
      
      - name: Print the ansible version
        run: ansible --version

      - name: Print the python dependencies
        run: python3 -m pip list

      - name: Run unit tests
        run: python -m pytest tests/unit --showlocals
        working-directory: ${{ steps.identify.outputs.collection_path }}
